defmodule Mix.Tasks.Build.App do
  @shortdoc "Package the application into a container image"

  @moduledoc """
  Build the Angular and Phoenix applications in preparation for
  container deployment.

  The build process here does not follow the standard template
  generated by `mix phx.gen.release --docker`. Instead, Angular and
  Phoenix are built outside the container and then copied in. This
  saves time by not having to re-download dependencies.

  The Angular application is a always a production build because
  there's nothing unique about its staging environment. Production is
  the default target for ng build.

  The Phoenix config varies by environment. See config/stage.exs and
  config/prod.exs

  If no arguments are provided, the default is a prod build.

  For a staging build, run:

  ```
  mix build.app stage
  ```

  The container image is built on top of a base image that should
  be built first:

  ```
  mix build.base
  ```
  """

  use Mix.Task

  def run([]) do
    run(["prod"])
  end

  def run(args) do
    Mix.Task.run("app.start")

    mix_env = hd(args)
    version = Application.spec(:ledger, :vsn)
    |> List.to_string()
    |> String.replace("+", ".")

    tz = Application.fetch_env!(:ledger, :timezone)

    now = Timex.now(tz)
    |> Timex.format!("{YYYY}-{0M}-{0D} {h24}:{m}:{s}{Z:}")

    revision = System.cmd("git", ["rev-parse", "HEAD"])
    |> elem(0)
    |> String.trim

    System.cmd("mix", ["deps.get", "--only=prod"],
      into: IO.stream(),
      stderr_to_stdout: true
    )

    System.cmd("mix", ["angular.build"],
      into: IO.stream(),
      stderr_to_stdout: true
    )

    System.cmd("mix", ["compile"],
      env: [{"MIX_ENV", mix_env}],
      into: IO.stream(),
      stderr_to_stdout: true
    )

    System.cmd("mix", ~w(release --overwrite),
      env: [{"MIX_ENV", mix_env}],
      into: IO.stream(),
      stderr_to_stdout: true
    )

    System.cmd("podman", [
      "build",
      "-f=Containerfile-app",
      "-t=ledger:#{mix_env}-#{version}",
      "-t=ledger:#{mix_env}",
	  "--label",
      "org.opencontainers.image.created=#{now}",
	  "--label",
      "org.opencontainers.image.description=A web application for balance tracking and financial history.",
	  "--label",
      "org.opencontainers.image.version=#{version}",
	  "--label",
      "org.opencontainers.image.revision=#{revision}",
	  "--label",
      "org.opencontainers.image.title=ledger",
	  "--label",
      "org.opencontainers.image.url=https://github.com/lovett/ledger",
      "."
    ],
      into: IO.stream(),
      stderr_to_stdout: true
    )

    IO.puts("\n\nPruning images...")

    System.cmd("podman", [
      "image",
      "prune",
      "-f"
    ],
      into: IO.stream(),
      stderr_to_stdout: true
    )

    IO.puts("\n\nLabels:")
    System.cmd("podman", [
      "image",
      "inspect",
      "--format={{range $key, $value := .Config.Labels}}{{$key}}: {{$value}}\n{{end}}",
      "ledger:#{mix_env}-#{version}"
      ],
        into: IO.stream(),
        stderr_to_stdout: true
    )
  end
end
